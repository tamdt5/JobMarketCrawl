services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:  # Thêm healthcheck cho Zookeeper
      test: ["CMD", "echo", "ruok", "|", "nc", "-w", "2", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: 0.0.0.0
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-jmx-exporter:
    image: solsson/kafka-prometheus-jmx-exporter:latest
    container_name: kafka-jmx-exporter
    platform: linux/amd64  # Hỗ trợ emulation trên arm64
    ports:
      - "8080:8080"
    volumes:
      - ./jmx-exporter-config.yml:/etc/jmx_exporter/config.yml:ro
    command: ["8080", "/etc/jmx_exporter/config.yml", "service:jmx:rmi:///jndi/rmi://kafka:9999/jmxrmi"]
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5

  pinot-controller:
    image: apachepinot/pinot:1.0.0
    container_name: pinot-controller
    command: ["StartController", "-zkAddress", "zookeeper:2181"]
    ports:
      - "9000:9000"
    volumes:
      - ./pinot:/var/pinot/data
      - pinot_data:/var/pinot/data/persistent
    depends_on:
      - zookeeper
    healthcheck:  # Thêm healthcheck cho controller
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # Chờ 60s để controller khởi tạo cluster

  pinot-server:
    image: apachepinot/pinot:1.0.0
    container_name: pinot-server
    command: ["StartServer", "-zkAddress", "zookeeper:2181"]
    volumes:
      - ./pinot:/var/pinot/data
      - pinot_data:/var/pinot/data/persistent 
    ports:
      - "8098:8098" # monitor prometheus
    depends_on:
      pinot-controller:
        condition: service_healthy
        
  pinot-broker:
    image: apachepinot/pinot:1.0.0
    container_name: pinot-broker
    command: ["StartBroker", "-zkAddress", "zookeeper:2181"]
    ports:
      - "8099:8099"
    depends_on:
      pinot-controller:
        condition: service_healthy  # Chờ controller healthy

  pinot-minion:
    image: apachepinot/pinot:1.2.0
    container_name: pinot-minion
    command: ["StartMinion", "-zkAddress", "zookeeper:2181", "-clusterName", "PinotCluster"]
    depends_on:
      pinot-controller:
        condition: service_healthy
    ports:
      - "8097:8097"
    environment:
      JAVA_OPTS: "-Xms512M -Xmx2G"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    depends_on:
      - pinot-controller

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
    volumes:
      - spark_data:/opt/bitnami/spark
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - spark_data:/opt/bitnami/spark

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  pinot_data:
  spark_data:
  grafana_data: